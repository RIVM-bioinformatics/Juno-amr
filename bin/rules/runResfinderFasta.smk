rule runResfinderFasta:
    """Trying to run resfinder with hardcoded paths and all packages installed in a environment generated by conda/snakemake"""
    input:
        #Samples retrieved from config.yaml
        fasta_sample = lambda wildcards: SAMPLES[wildcards.sample]["assembly"]

    output:
        #Make an output directory per sample
        output_dir = directory(OUT + "/results/resfinder/{sample}")
    
    #conda:
    #    "../../envs/resfinder.yaml"
    
    message:
        "Processing received fasta sample in ResFinder and PointFinder"

    params:
    #get parameters from configfile
        l = config["resfinder_min_coverage"],
        t = config["resfinder_identity_threshold"],
        species = config["species"],
        resfinder_db = config["resfinder_db"],
        pointfinder_db = config["pointfinder_db"],
        run_pointfinder = config["run_pointfinder"]
        
    resources: 
        mem_gb=config["mem_gb"]["resfinder"]

    threads: config["threads"]["resfinder"]


    shell:
        # Command to call resfinder
        """
if [ {params.run_pointfinder} == "1" ]; then
    python3 bin/resfinder/run_resfinder.py -o {output.output_dir} -s \"{params.species}\" -l {params.l} -t {params.t} --acquired --point -ifa {input.fasta_sample} -db_res {params.resfinder_db} -db_point {params.pointfinder_db}
else
    python3 bin/resfinder/run_resfinder.py -o {output.output_dir} -s \"{params.species}\" -l {params.l} -t {params.t} --acquired -ifa {input.fasta_sample} -db_res {params.resfinder_db} -db_point {params.pointfinder_db}
fi
        """
